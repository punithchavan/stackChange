[
  {
    "controller": "register_controller",
    "input_template": "// register.controller.js - Template\n\n/*\nConverted from Django views\n*/\n\nconst register_controller = {\n    // @csrf_exempt\n    // def register_user(request):\n    //     if request.method == 'POST':\n    //         data = json.loads(request.body)\n    //         try:\n    //             User.objects.create_user(username=data['username'], password=data['password'])\n    //             return JsonResponse({'message': 'User registered successfully'})\n    //         except:\n    //             return JsonResponse({'error': 'User already exists'}, status=400)\n};\n\nmodule.exports = register_controller;\n",
    "output": "const express = require('express');\nconst router = express.Router();\nconst User = require('./models/User'); // Assuming User model is in ./models/User.js\n\nrouter.post('/register', async (req, res) => {\ntry {\nconst user = await User.create({ username: req.body.username, password: req.body.password });\nres.json({ message: 'User registered successfully' });\n} catch (error) {\nres.status(400).json({ error: 'User already exists' });\n}\n});\n\n\nmodule.exports = router;"
  },
  {
    "controller": "login_controller",
    "input_template": "// login.controller.js - Template\n\n/*\nConverted from Django views\n*/\n\nconst login_controller = {\n    // @csrf_exempt\n    // def login_user(request):\n    //     if request.method == 'POST':\n    //         data = json.loads(request.body)\n    //         user = authenticate(username=data['username'], password=data['password'])\n    //         if user:\n    //             return JsonResponse({'message': 'Login successful', 'user_id': user.id, 'token': 'dummy-jwt-token'})\n    //         else:\n    //             return JsonResponse({'error': 'Invalid credentials'}, status=401)\n};\n\nmodule.exports = login_controller;\n",
    "output": "const express = require('express');\nconst router = express.Router();\n\nrouter.post('/login', (req, res) => {\nconst { username, password } = req.body;\n// Replace with actual authentication logic\nconst user = authenticate(username, password);\nif (user) {\nres.json({ message: 'Login successful', user_id: user.id, token: 'dummy-jwt-token' });\n} else {\nres.status(401).json({ error: 'Invalid credentials' });\n}\n});\n\n\nfunction authenticate(username, password) {\n// Replace with your actual authentication logic\nif (username === 'testuser' && password === 'password') {\nreturn { id: 1 };\n}\nreturn null;\n}\n\nmodule.exports = router;"
  },
  {
    "controller": "create_controller",
    "input_template": "// create.controller.js - Template\n\n/*\nConverted from Django views\n*/\n\nconst create_controller = {\n    // @csrf_exempt\n    // def create_post(request):\n    //     if request.method == 'POST':\n    //         data = json.loads(request.body)\n    //         try:\n    //             user = User.objects.get(id=data['user_id'])\n    //             post = Post.objects.create(author=user, content=data['content'])\n    //             return JsonResponse({'message': 'Post created', 'post_id': post.id})\n    //         except:\n    //             return JsonResponse({'error': 'User not found'}, status=400)\n};\n\nmodule.exports = create_controller;\n",
    "output": "const express = require('express');\nconst router = express.Router();\nconst User = require('./models/User');\nconst Post = require('./models/Post');\n\nrouter.post('/posts', async (req, res) => {\ntry {\nconst user = await User.findById(req.body.user_id);\nif (!user) {\nreturn res.status(400).json({ error: 'User not found' });\n}\nconst post = await Post.create({ author: user._id, content: req.body.content });\nres.json({ message: 'Post created', post_id: post._id });\n} catch (error) {\nres.status(400).json({ error: 'Failed to create post' });\n}\n});\n\n\nmodule.exports = router;"
  },
  {
    "controller": "get_controller",
    "input_template": "// get.controller.js - Template\n\n/*\nConverted from Django views\n*/\n\nconst get_controller = {\n    // def get_post(request, post_id):\n    //     try:\n    //         post = Post.objects.get(id=post_id)\n    //         return JsonResponse({'author': post.author.username, 'content': post.content, 'created_at': post.created_at})\n    //     except Post.DoesNotExist:\n    //         return JsonResponse({'error': 'Post not found'}, status=404)\n};\n\nmodule.exports = get_controller;\n",
    "output": "const express = require('express');\nconst router = express.Router();\nconst Post = require('./models/Post');\n\n\nrouter.get('/:post_id', async (req, res) => {\ntry {\nconst post = await Post.findById(req.params.post_id);\nif (!post) {\nreturn res.status(404).json({ error: 'Post not found' });\n}\nres.json({ author: post.author.username, content: post.content, created_at: post.created_at });\n} catch (error) {\nres.status(500).json({ error: 'Server error' });\n}\n});\n\n\nmodule.exports = router;"
  },
  {
    "controller": "add_controller",
    "input_template": "// add.controller.js - Template\n\n/*\nConverted from Django views\n*/\n\nconst add_controller = {\n    // @csrf_exempt\n    // def add_comment(request):\n    //     if request.method == 'POST':\n    //         data = json.loads(request.body)\n    //         try:\n    //             post = Post.objects.get(id=data['post_id'])\n    //             user = User.objects.get(id=data['user_id'])\n    //             comment = Comment.objects.create(post=post, user=user, comment_text=data['comment_text'])\n    //             return JsonResponse({'message': 'Comment added', 'comment_id': comment.id})\n    //         except:\n    //             return JsonResponse({'error': 'Invalid post or user'}, status=400)\n};\n\nmodule.exports = add_controller;\n",
    "output": "const express = require('express');\nconst router = express.Router();\nconst Post = require('../models/Post');\nconst User = require('../models/User');\nconst Comment = require('../models/Comment');\n\nrouter.post('/add_comment', async (req, res) => {\nconst { post_id, user_id, comment_text } = req.body;\ntry {\nconst post = await Post.findById(post_id);\nconst user = await User.findById(user_id);\nif (!post || !user) {\nreturn res.status(400).json({ error: 'Invalid post or user' });\n}\nconst comment = await Comment.create({ post, user, comment_text });\nres.json({ message: 'Comment added', comment_id: comment._id });\n} catch (error) {\nres.status(400).json({ error: 'Invalid post or user' });\n}\n});\n\n\nmodule.exports = router;"
  }
]